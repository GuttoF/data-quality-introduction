{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introdu\u00e7\u00e3o ao Data Quality","text":""},{"location":"#fluxo","title":"Fluxo","text":"<pre><code>graph TD\n    A[Configurar Vari\u00e1veis] --&gt; B[Ler o Banco SQL];\n    B --&gt; V[Valida\u00e7\u00e3o do Schema de Entrada];\n    B --&gt; |Falha| X[Alerta de Erro];\n    V --&gt; |Falha| X[Alerta de Erro];\n    V --&gt; |Sucesso| C[Transformar os KPIs];\n    C --&gt; Y[Valida\u00e7\u00e3o do Schema de Sa\u00edda];\n    Y --&gt; |Falha| Z[Alerta de Erro];\n    Y --&gt; |Sucesso| D[Salvar no DuckDB];\n</code></pre> <p>For full documentation visit mkdocs.org.</p>"},{"location":"#contrato-de-dados","title":"Contrato de dados","text":"<p>               Bases: <code>DataFrameModel</code></p> <p>A schema model for validating a DataFrame containing product information using pandera.</p>"},{"location":"#app.schema.ProdutoSchema--attributes","title":"Attributes:","text":"<p>id_produto : Series[int]     An integer field representing the product ID. This field is not nullable and its values are coerced to integers.</p> Series[str] <p>A string field representing the product name. This field is not nullable and its values are coerced to strings.</p> Series[float] <p>A float field representing the quantity of the product. This field has a range constraint with values between -150.0 and 500.0 (inclusive). It is not nullable and its values are coerced to floats.</p> Series[float] <p>A float field representing the price of the product. This field has a range constraint with values between 2.0 and 2000.0 (inclusive). It is not nullable and its values are coerced to floats.</p> Series[str] <p>A string field representing the product category. This field is not nullable and its values are coerced to strings.</p>"},{"location":"#app.schema.ProdutoSchema--config","title":"Config:","text":"<p>coerce : bool     A configuration setting to ensure that the data types are coerced as specified.</p> bool <p>A configuration setting to ensure strict validation of the schema.</p> Source code in <code>app/schema.py</code> <pre><code>class ProdutoSchema(pa.DataFrameModel):\n    \"\"\"\n    A schema model for validating a DataFrame containing product information using pandera.\n\n    Attributes:\n    -----------\n    id_produto : Series[int]\n        An integer field representing the product ID. This field is not nullable and its values are coerced to integers.\n\n    nome : Series[str]\n        A string field representing the product name. This field is not nullable and its values are coerced to strings.\n\n    quantidade : Series[float]\n        A float field representing the quantity of the product. This field has a range constraint with values\n        between -150.0 and 500.0 (inclusive). It is not nullable and its values are coerced to floats.\n\n    preco : Series[float]\n        A float field representing the price of the product. This field has a range constraint with values\n        between 2.0 and 2000.0 (inclusive). It is not nullable and its values are coerced to floats.\n\n    categoria : Series[str]\n        A string field representing the product category. This field is not nullable and its values are coerced to strings.\n\n    Config:\n    -------\n    coerce : bool\n        A configuration setting to ensure that the data types are coerced as specified.\n\n    strict : bool\n        A configuration setting to ensure strict validation of the schema.\n    \"\"\"\n\n    id_produto: Series[int] = pa.Field(nullable=False, coerce=True)\n    nome: Series[str] = pa.Field(nullable=False, coerce=True)\n    quantidade: Series[float] = pa.Field(\n        ge=-150.0, le=500.0, nullable=False, coerce=True\n    )\n    preco: Series[float] = pa.Field(ge=2.0, le=2000.0, nullable=False, coerce=True)\n    categoria: Series[str] = pa.Field(nullable=False, coerce=True)\n\n    class Config:\n        coerce = True\n        strict = True\n</code></pre>"}]}