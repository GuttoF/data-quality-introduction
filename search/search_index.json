{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introdu\u00e7\u00e3o ao Data Quality","text":""},{"location":"#fluxo","title":"Fluxo","text":"<pre><code>graph TD\n    A[Configurar Vari\u00e1veis] --&gt; B[Ler o Banco SQL];\n    B --&gt; V[Valida\u00e7\u00e3o do Schema de Entrada];\n    B --&gt; |Falha| X[Alerta de Erro];\n    V --&gt; |Falha| X[Alerta de Erro];\n    V --&gt; |Sucesso| C[Transformar os KPIs];\n    C --&gt; Y[Valida\u00e7\u00e3o do Schema de Sa\u00edda];\n    Y --&gt; |Falha| Z[Alerta de Erro];\n    Y --&gt; |Sucesso| D[Salvar no DuckDB];\n</code></pre>"},{"location":"#contrato-de-dados","title":"Contrato de dados","text":"<p>               Bases: <code>DataFrameModel</code></p> <p>Um modelo de esquema para validar um DataFrame contendo informa\u00e7\u00f5es de produtos usando pandera.</p>"},{"location":"#app.schema.ProdutoSchema--atributos","title":"Atributos:","text":"<p>id_produto : Series[int]     Um campo inteiro que representa o ID do produto. Este campo n\u00e3o \u00e9 anul\u00e1vel e seus valores s\u00e3o convertidos para inteiros.</p> Series[str] <p>Um campo de string que representa o nome do produto. Este campo n\u00e3o \u00e9 anul\u00e1vel e seus valores s\u00e3o convertidos para strings.</p> Series[float] <p>Um campo float que representa a quantidade do produto. Este campo tem uma restri\u00e7\u00e3o de intervalo com valores entre -150.0 e 500.0 (inclusive). Ele n\u00e3o \u00e9 anul\u00e1vel e seus valores s\u00e3o convertidos para floats.</p> Series[float] <p>Um campo float que representa o pre\u00e7o do produto. Este campo tem uma restri\u00e7\u00e3o de intervalo com valores entre 2.0 e 2000.0 (inclusive). Ele n\u00e3o \u00e9 anul\u00e1vel e seus valores s\u00e3o convertidos para floats.</p> Series[str] <p>Um campo de string que representa a categoria do produto. Este campo n\u00e3o \u00e9 anul\u00e1vel e seus valores s\u00e3o convertidos para strings.</p>"},{"location":"#app.schema.ProdutoSchema--config","title":"Config:","text":"<p>coerce : bool     Uma configura\u00e7\u00e3o para garantir que os tipos de dados sejam convertidos conforme especificado.</p> bool <p>Uma configura\u00e7\u00e3o para garantir a valida\u00e7\u00e3o estrita do esquema.</p> Source code in <code>app/schema.py</code> <pre><code>class ProdutoSchema(pa.DataFrameModel):\n    \"\"\"\n    Um modelo de esquema para validar um DataFrame contendo informa\u00e7\u00f5es de produtos usando pandera.\n\n    Atributos:\n    ----------\n    id_produto : Series[int]\n        Um campo inteiro que representa o ID do produto. Este campo n\u00e3o \u00e9 anul\u00e1vel e seus valores s\u00e3o convertidos para inteiros.\n\n    nome : Series[str]\n        Um campo de string que representa o nome do produto. Este campo n\u00e3o \u00e9 anul\u00e1vel e seus valores s\u00e3o convertidos para strings.\n\n    quantidade : Series[float]\n        Um campo float que representa a quantidade do produto. Este campo tem uma restri\u00e7\u00e3o de intervalo com valores entre\n        -150.0 e 500.0 (inclusive). Ele n\u00e3o \u00e9 anul\u00e1vel e seus valores s\u00e3o convertidos para floats.\n\n    preco : Series[float]\n        Um campo float que representa o pre\u00e7o do produto. Este campo tem uma restri\u00e7\u00e3o de intervalo com valores entre\n        2.0 e 2000.0 (inclusive). Ele n\u00e3o \u00e9 anul\u00e1vel e seus valores s\u00e3o convertidos para floats.\n\n    categoria : Series[str]\n        Um campo de string que representa a categoria do produto. Este campo n\u00e3o \u00e9 anul\u00e1vel e seus valores s\u00e3o convertidos para strings.\n\n    Config:\n    -------\n    coerce : bool\n        Uma configura\u00e7\u00e3o para garantir que os tipos de dados sejam convertidos conforme especificado.\n\n    strict : bool\n        Uma configura\u00e7\u00e3o para garantir a valida\u00e7\u00e3o estrita do esquema.\n    \"\"\"\n\n    id_produto: Series[int] = pa.Field(nullable=False, coerce=True)\n    nome: Series[str] = pa.Field(nullable=False, coerce=True)\n    quantidade: Series[float] = pa.Field(\n        ge=-150.0, le=500.0, nullable=False, coerce=True\n    )\n    preco: Series[float] = pa.Field(ge=2.0, le=2000.0, nullable=False, coerce=True)\n    categoria: Series[str] = pa.Field(nullable=False, coerce=True)\n    email: Series[str] = pa.Field(regex=email_regex, nullable=False, coerce=True)\n\n    class Config:\n        coerce = True\n        strict = True\n</code></pre>"},{"location":"#transformacoes","title":"Transformacoes","text":""},{"location":"#configura-variaveis","title":"Configura Vari\u00e1veis","text":"Source code in <code>app/etl.py</code> <pre><code>def load_settings():\n    dotenv_path = Path.cwd() / \".env\"\n    load_dotenv(dotenv_path=dotenv_path)\n\n    settings = {\n        \"db_host\": os.getenv(\"POSTGRES_HOST\"),\n        \"db_user\": os.getenv(\"POSTGRES_USER\"),\n        \"db_pass\": os.getenv(\"POSTGRES_PASSWORD\"),\n        \"db_name\": os.getenv(\"POSTGRES_DB\"),\n        \"db_port\": os.getenv(\"POSTGRES_PORT\"),\n    }\n\n    return settings\n</code></pre>"},{"location":"#ler-o-banco-sql","title":"Ler o Banco SQL","text":"<p>Extracts data from a PostgreSQL database using the provided query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The SQL query to execute.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The extracted data as a pandas DataFrame.</p> Source code in <code>app/etl.py</code> <pre><code>@pa.check_output(ProdutoSchema, lazy=True)\ndef extract(query: str) -&gt; pd.DataFrame:\n    \"\"\"\n    Extracts data from a PostgreSQL database using the provided query.\n\n    Args:\n        query (str): The SQL query to execute.\n\n    Returns:\n        pd.DataFrame: The extracted data as a pandas DataFrame.\n    \"\"\"\n    settings = load_settings()\n\n    # create connection string\n    connection_string = f\"postgresql://{settings['db_user']}:{settings['db_pass']}@{settings['db_host']}:{settings['db_port']}/{settings['db_name']}\"\n\n    # create sqlalchemy engine\n    engine = create_engine(connection_string)\n\n    with engine.connect() as conn, conn.begin():\n        df_crm = pd.read_sql(query, conn)\n\n    return df_crm\n</code></pre>"},{"location":"#transformar-os-kpis","title":"Transformar os KPIs","text":"<p>Transforms the given DataFrame by adding new columns and modifying existing ones.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The input DataFrame to be transformed.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The transformed DataFrame.</p> Source code in <code>app/etl.py</code> <pre><code>@pa.check_input(ProdutoSchema, lazy=True)\n@pa.check_output(ProdutoSchemaKPI, lazy=True)\ndef transform(df: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"\n    Transforms the given DataFrame by adding new columns and modifying existing ones.\n\n    Args:\n        df (pd.DataFrame): The input DataFrame to be transformed.\n\n    Returns:\n        pd.DataFrame: The transformed DataFrame.\n    \"\"\"\n    df[\"valor_total_estoque\"] = df[\"quantidade\"] * df[\"preco\"]\n    df[\"categoria_normalizada\"] = df[\"categoria\"].str.lower()\n    # True if the product is available, False otherwise\n    df[\"disponibilidade\"] = df[\"quantidade\"] &gt; 0\n\n    return df\n</code></pre>"},{"location":"#salvar-no-duckdb","title":"Salvar no DuckDB","text":"<p>Loads the given DataFrame into a DuckDB database.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The DataFrame to load into the database.</p> required <code>table_name</code> <code>str</code> <p>The name of the table to create in the database.</p> required <code>db_file</code> <code>str</code> <p>The path to the DuckDB database file.</p> <code>'duckdb_file.db'</code> Source code in <code>app/etl.py</code> <pre><code>def load(df: pd.DataFrame, table_name: str, db_file: str = \"duckdb_file.db\"):\n    \"\"\"\n    Loads the given DataFrame into a DuckDB database.\n\n    Args:\n        df (pd.DataFrame): The DataFrame to load into the database.\n        table_name (str): The name of the table to create in the database.\n        db_file (str): The path to the DuckDB database file.\n    \"\"\"\n    # create a connection to the database\n    conn = duckdb.connect(database=db_file, read_only=False)\n\n    # load the DataFrame into the database\n    conn.register(\"df_temp\", df)\n    conn.execute(f\"CREATE OR REPLACE TABLE {table_name} AS SELECT * FROM df_temp\")\n\n    # close the connection\n    conn.close()\n</code></pre>"}]}